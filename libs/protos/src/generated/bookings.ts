// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: bookings.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";

export const protobufPackage = "bookings";

export enum ServiceType {
  MANICURE = 0,
  PEDICURE = 1,
  HAIRCUT = 2,
  UNRECOGNIZED = -1,
}

export interface CreateRequest {
  userId: string;
  clientName: string;
  clientPhone: string;
  serviceType: ServiceType;
  startsAt: Date | undefined;
  notes?: string | undefined;
}

export interface Booking {
  id: string;
  userId: string;
  clientName: string;
  clientPhone: string;
  serviceType: ServiceType;
  startsAt: Date | undefined;
  notes?: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}

export interface FindAllRequest {
  userId: string;
  isPast?: boolean | undefined;
  limit?: number | undefined;
  page?: number | undefined;
}

export interface FindAllResponse {
  bookings: Booking[];
  meta: Meta | undefined;
}

export interface Meta {
  total: number;
  currentPage: number;
  lastPage: number;
  hasNextPage: boolean;
  hasPreviousPage: boolean;
}

export interface FindOneRequest {
  id: string;
}

export interface FindOneResponse {
  booking: Booking | undefined;
}

export const BOOKINGS_PACKAGE_NAME = "bookings";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface BookingsServiceClient {
  create(request: CreateRequest): Observable<Booking>;

  findAll(request: FindAllRequest): Observable<FindAllResponse>;

  findOne(request: FindOneRequest): Observable<Booking>;
}

export interface BookingsServiceController {
  create(request: CreateRequest): Promise<Booking> | Observable<Booking> | Booking;

  findAll(request: FindAllRequest): Promise<FindAllResponse> | Observable<FindAllResponse> | FindAllResponse;

  findOne(request: FindOneRequest): Promise<Booking> | Observable<Booking> | Booking;
}

export function BookingsServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "findAll", "findOne"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("BookingsService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("BookingsService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const BOOKINGS_SERVICE_NAME = "BookingsService";
